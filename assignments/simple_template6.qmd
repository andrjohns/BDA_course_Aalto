---
title: "Assignment 6"
author: anonymous # <-- hand in anonymously
format: 
  html:
    toc: true
    code-tools: true
    code-line-numbers: true
    standalone: true
    self-contained: true
    embed-resources: true  
    number-sections: true
    mainfont: Georgia, serif
    linkcolor: "#212529"
    fontsize: 1.2em
    page-layout: article
  pdf:  
    documentclass: article
    number-sections: true
    code-annotations: none
reference-location: margin
citation-location: margin 
comments:
  hypothesis: true
editor: source
---


# General information
::: {.callout-important}
# Reporting accuracy

**For posterior statistics of interest, only
report digits for which the Monte Carlo standard error (MCSE) is zero.**

*Example:* If you estimate $E(\mu)=1.234$ with MCSE($E(\mu)$) = 0.01,
you should report $E(\mu)=1.2$.

See lecture video 4.1, [the chapter
notes](https://avehtari.github.io/BDA_course_Aalto/chapter_notes/BDA_notes_ch10.pdf),
and [a case
study](https://avehtari.github.io/casestudies/Digits/digits.html) for
more information.
:::


This is the template for [assignment 6](assignment6.html). You can download the [qmd-file](https://raw.githubusercontent.com/avehtari/BDA_course_Aalto/gh-pages/assignments/template6.qmd) or copy the code from this rendered document after clicking on `</> Code` in the top right corner.

**Please replace the instructions in this template by your own text, explaining what you are doing in each exercise.** 



:::: {.content-hidden when-format="pdf"}
::: {.callout-warning collapse=false}
 
## Setup 


*This block will only be visible in your HTML output, but will be hidden when rendering to PDF with quarto for the submission.*
**Make sure that this does not get displayed in the PDF!**
    



The following installs and loads the `aaltobda` package:
```{r}
if(!require(aaltobda)){
    install.packages("remotes")
    remotes::install_github("avehtari/BDA_course_Aalto", subdir = "rpackage", upgrade="never")
    library(aaltobda)
}
```
The following installs and loads the [`latex2exp` package](https://github.com/stefano-meschiari/latex2exp), which allows us to use LaTeX in plots:
```{r}
if(!require(latex2exp)){
    install.packages("latex2exp")
    library(latex2exp)
}
```
The following installs and loads the [`posterior` package](https://github.com/stan-dev/posterior) which imports the `rhat_basic()` function:
```{r}
if(!require(posterior)){
    install.packages("posterior")
    library(posterior)
}
```
The following installs and loads the [`ggplot2` package](https://ggplot2.tidyverse.org/), the [`bayesplot` package](https://mc-stan.org/bayesplot/index.html) and the [`dplyr` package](https://dplyr.tidyverse.org/)
```{r}
if(!require(ggplot2)){
    install.packages("ggplot2")
    library(ggplot2)
}
if(!require(bayesplot)){
    install.packages("bayesplot")
    library(bayesplot)
}
if(!require(dplyr)){
    install.packages("dplyr")
    library(dplyr)
}
if(!require(tidyr)){
    install.packages("tidyr")
    library(tidyr)
}
# Some additional set-up to make plots legible
ggplot2::theme_set(theme_minimal(base_size = 14))
bayesplot::bayesplot_theme_set(theme_minimal(base_size = 14))
# register_knitr_engine()
```
The following installs and loads the [`cmdstanr` package](https://mc-stan.org/cmdstanr/) and tries to install `cmdstan`.
```{r}
if(!require(cmdstanr)){
    install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
    library(cmdstanr)
}
cmdstan_installed <- function(){
  res <- try(out <- cmdstanr::cmdstan_path(), silent = TRUE)
  !inherits(res, "try-error")
}
if(!cmdstan_installed()){
    install_cmdstan()
}
```

:::
::::


# Stan warm-up: linear model of BDA retention with Stan (2 points)



**Write your answers/code here!**


::: {.both}
```{r}
#| warning: false
# These are our observations y: the proportion of students handing in each assignment (1-8),
# sorted by year (row-wise) and assignment (column-wise).
# While the code suggest a matrix structure, 
# the result will actually be a vector of length N = no_years * no_assignments
propstudents<-c(c(176, 174, 158, 135, 138, 129, 126, 123)/176,
                c(242, 212, 184, 177, 174, 172, 163, 156)/242,
                c(332, 310, 278, 258, 243, 242, 226, 224)/332,
                c(301, 269, 231, 232, 217, 208, 193, 191)/301,
                c(245, 240, 228, 217, 206, 199, 191, 182)/245)
# These are our predictors x: for each observation, the corresponding assignment number.
assignment <- rep(1:8, 5)
# These are in some sense our test data: the proportion of students handing in the last assignment (9),
# sorted by year. 
# Usually, we would not want to split our data like that and instead
# use e.g. Leave-One-Out Cross-Validation (LOO-CV, see e.g. http://mc-stan.org/loo/index.html)
# to evaluate model performance.
propstudents9 = c(121/176, 153/242, 218/332, 190/301, 175/245)
# The total number of assignments
no_assignments = 9
# The assignment numbers for which we want to generate predictions
x_predictions = 1:no_assignments
# (Cmd)Stan(R) expects the data to be passed in the below format:
model_data = list(N=length(assignment),
                 x=assignment,
                 y=propstudents,
                 no_predictions=no_assignments,
                 x_predictions=x_predictions)
# This reads the file at the specified path and tries to compile it. 
# If it fails, an error is thrown.
retention_model = cmdstan_model("./assignment6_linear_model.stan")
# This "out <- capture.output(...)" construction suppresses output from cmdstanr
# See also https://github.com/stan-dev/cmdstanr/issues/646
out <- capture.output(
    # Sampling from the posterior distribution happens here:
    fit <- retention_model$sample(data=model_data, refresh=0, show_messages=FALSE)
)
# This extracts the draws from the sampling result as a data.frame.
draws_df = fit$draws(format="draws_df")

# This does some data/draws wrangling to compute the 5, 50 and 95 percentiles of 
# the mean at the specified covariate values (x_predictions). 
# It can be instructive to play around with each of the data processing steps
# to find out what each step does, e.g. by removing parts from the back like "|>  gather(pct,y,-x)"
# and printing the resulting data.frame.
mu_quantiles_df = draws_df |> 
      select(starts_with(c("mu_pred"))) |> 
      apply(2, quantile, c(0.05, 0.5, 0.95)) |> 
      t() |> data.frame(x=x_predictions) |>  gather(pct,y,-x)
# Same as above, but for the predictiions.
y_quantiles_df = draws_df |> 
      select(starts_with(c("y_pred"))) |> 
      apply(2, quantile, c(0.05, 0.5, 0.95)) |> 
      t() |> data.frame(x=x_predictions) |>  gather(pct,y,-x)

# Plotting happens here:
ggplot() +
  # scatter plot of the training data:  
  geom_point(aes(x, y), data = data.frame(x=assignment, y=propstudents), size = 1) +
  # scatter plot of the test data:
  geom_point(aes(x, y), data = data.frame(x=no_assignments, y=propstudents9), size = 1, color='blue') +
  # you have to tell us what this plots:
  geom_line(aes(x,y,linetype=pct), data=mu_quantiles_df, color = 'grey', linewidth=1.5) +
  # you have to tell us what this plots:
  geom_line(aes(x,y,linetype=pct), data=y_quantiles_df, color = 'red') +
  # adding xticks for each assignment:
  scale_x_continuous(breaks=1:no_assignments) +
  # adding labels to the plot:
  labs(y = "Assignment submission %", x= "Assignment Number") +
  # specifying that line types repeat:
  scale_linetype_manual(values=c(2,1,2)) +
  # remove the legend for the linetypes:
  guides(linetype = "none")
```
:::


:::: {.content-hidden when-format="pdf"}
::: {.callout-warning collapse=false}

# Quick check for sampling convergence

If your model is correctly implemented, sampling from the posterior should have been succesful.
You can check whether Stan thinks that sampling succeeded by inspecting the output of the below command,
which you should be able to interpret with a little help from the [CmdStan User's Guide](https://mc-stan.org/docs/cmdstan-guide/diagnose.html).
If 
```{r}
fit$cmdstan_diagnose()
```

:::
::::





**Write your answers/code here!**


# Generalized linear model: Bioassay with Stan (4 points) 



**Write your answers/code here!**
```{r}
data("bioassay")
```





**Write your answers/code here!**





**Write your answers/code here!**





**Write your answers/code here!**

