{
  "hash": "f5f9129af57d26f5acabd5e0cdfa5161",
  "result": {
    "markdown": "---\ntitle: \"Assignment 6\"\nauthor: \"Aki Vehtari et al.\"\nformat:\n  html:\n    toc: true\n    code-tools: true\n    code-line-numbers: true\n    number-sections: true\n    mainfont: Georgia, serif\n    page-layout: article\neditor: source\nfilters:\n  - includes/assignments.lua\n  - includes/include-code-files.lua\n---\n\n\n# General information\n\n**The maximum amount of points from this assignment is 6.**\n\nWe have prepared a **quarto template specific to this assignment ([html](template6.html), [qmd](https://avehtari.github.io/BDA_course_Aalto/assignments/template6.qmd), [pdf](template6.pdf))** to help you get started.\n\n\n::: {.aalto}\nWe recommend you use [jupyter.cs.aalto.fi](https://jupyter.cs.aalto.fi) or the [docker container](docker.html).\n:::\n\n::: {.hint}\n**Reading instructions:**\n\n- [**The reading instructions for BDA3 Chapter 10**](../BDA3_notes.html#ch10).\n- [**The reading instructions for BDA3 Chapter 11**](../BDA3_notes.html#ch11).\n\n**Grading instructions:** \n\nThe grading will be done in peergrade. \nAll grading questions and evaluations for this assignment are contained within this document\nin the collapsible **Rubric** blocks.\n\n**Installing and using `CmdStanR`:** \n\nSee the [Stan\ndemos](https://avehtari.github.io/BDA_course_Aalto/demos.html) on how to\nuse Stan in R (or Python).\n[Aalto JupyterHub](https://Aalto JupyterHub) has working R and\nCmdStanR/RStan environment and is probably the easiest way to use Stan.\n* To use CmdStanR in [Aalto JupyterHub](https://Aalto JupyterHub):<br>\n  `library(cmdstanr)`<br>\n  `set_cmdstan_path('/coursedata/cmdstan')`\n\nThe Aalto Ubuntu desktops also have the necessary libraries installed.]{.aalto}\n\nTo install Stan on your laptop, run 'install.packages(\\\"cmdstanr\\\",\nrepos = c(\\\"https://mc-stan.org/r-packages/\\\", getOption(\\\"repos\\\")))'\nin R. If you encounter problems, see additional answers in\n[**FAQ**](https://avehtari.github.io/BDA_course_Aalto/FAQ.html). [If you\ndon't succeed in short amount of time, it is probably easier to use\n[Aalto JupyterHub](https://Aalto JupyterHub).]{.aalto}\n\n[If you use `Aalto JupyterHub`, all necessary packages have been\npre-installed.]{.aalto} In your laptop, install package `cmdstanr`. Installation\ninstructions on Linux, Mac and Windows can be found at\n<https://mc-stan.org/cmdstanr/>. Additional useful packages are `loo`,\n`bayesplot` and `posterior` (but you don't need these in this\nassignment). For Python users, `PyStan`, `CmdStanPy`, and `ArviZ`\npackages are useful.\n\nStan manual can be found at <https://mc-stan.org/users/documentation/>.\nFrom this website, you can also find a lot of other useful material\nabout Stan.\n\nIf you edit files ending `.stan` in RStudio, you can click \"Check\" in\nthe editor toolbar to make syntax check. This can significantly speed-up\nwriting a working Stan model.\n\n\n:::\n\n\n::: {.callout-important collapse=false}\n# Reporting accuracy\n\n**For posterior statistics of interest, only\nreport digits that are not completely random based on the Monte Carlo standard error (MCSE).**\n\n*Example:* If you estimate $E(\\mu) \\approx 1.234$ with MCSE($E(\\mu)$)\n= 0.01, then the true expectation is likely to be between $1.204$ and\n$1.264$, it makes sense to report $E(\\mu) \\approx 1.2$.\n\nSee Lecture video 4.1, [the chapter\nnotes](../BDA3_notes.html#ch10),\nand [a case\nstudy](https://avehtari.github.io/casestudies/Digits/digits.html) for\nmore information.\n:::\n\n::: {.callout-tip collapse=true}\n## Further information\n\n- The recommended tool in this course is R (with the IDE RStudio).\n- Instead of installing R and RStudio on you own computer, see [**how\n  to use R and RStudio remotely**](https://avehtari.github.io/BDA_course_Aalto/FAQ.html#How_to_use_R_and_RStudio_remotely).\n- If you want to install R and RStudio locally,\n  download [R and RStudio](https://posit.co/download/rstudio-desktop/).\n- There are tons of tutorials, videos and introductions to R and\n  RStudio online. You can find some initial hints from [**RStudio\n  Education pages**](https://education.rstudio.com/).\n- When working with R, we recommend writing the report using `quarto` and the provided template.\n  The template includes the formatting instructions and how to include code and figures.\n- Instead of `quarto`, you can use other software to make the PDF\n  report, but the the same instructions for formatting should be used.\n- Report all results in a single, **anonymous** \\*.pdf -file and\n  submit it in [**peergrade.io**](peergrade.io).\n- The course has its own R package `aaltobda` with data and\n  functionality to simplify coding. The package is pre-installed in JupyterHub.\n  To install the package on your own system, run\n  the following code (upgrade=\\\"never\\\" skips question about updating other packages):\n```{.r}\ninstall.packages(\"aaltobda\", repos = c(\"https://avehtari.github.io/BDA_course_Aalto/\", getOption(\"repos\")))\n```\n-   Many of the exercises can be checked automatically using the R\n    package `markmyassignment` (pre-installed in JupyterHub).\n    Information on how to install and use the\n    package can be found in [the `markmyassignment` documentation](https://cran.r-project.org/web/packages/markmyassignment/vignettes/markmyassignment.html).\n    There is no need to include `markmyassignment` results in the\n    report.\n-   Recommended additional self study exercises for each chapter in BDA3\n    are listed in the course web page. These will help to gain deeper understanding of the topic.\n-   Common questions and answers regarding installation and technical\n    problems can be found in [Frequently Asked Questions\n    (FAQ)](https://avehtari.github.io/BDA_course_Aalto/FAQ.html).\n-   Deadlines for all assignments can be found on the course web page\n    and in Peergrade. You can set email alerts for the deadlines in\n    Peergrade settings.\n-   You are allowed to discuss assignments with your friends, but it is\n    not allowed to copy solutions directly from other students or from\n    internet.\n-   You can copy, e.g., plotting code from the course demos,\n    but really try to solve the actual assignment problems with your own\n    code and explanations.\n-   Do not share your answers publicly.\n-   Do not copy answers from the internet or from previous years. We compare\n    the answers to the answers from previous years and to the answers\n    from other students this year.\n-   Use of AI is allowed on the course, but the most of the work needs to by the student, and you need to report\n    whether you used AI and in which way you used them (See [points 5 and 6 in Aalto guidelines for use of AI in teaching](https://www.aalto.fi/en/services/guidance-for-the-use-of-artificial-intelligence-in-teaching-and-learning-at-aalto-university)).\n-   All suspected plagiarism will be\n    reported and investigated. See more about the [**Aalto University\n    Code of Academic Integrity and Handling Violations\n    Thereof**](https://into.aalto.fi/display/ensaannot/Aalto+University+Code+of+Academic+Integrity+and+Handling+Violations+Thereof).\n-   Do not submit empty PDFs, almost empty PDFs, copy of the questions, nonsense generated by yourself or AI, as these are just\n    harming the other students as they can't do peergrading for the\n    empty or nonsense submissions. Violations of this rule will be\n    reported and investigated in the same way was plagiarism.\n-   If you have any suggestions or improvements to the course material,\n    please post in the course chat feedback channel, create an issue, or\n    submit a pull request to the public repository!\n\n\n:::\n\n\n\n::: {.rubric weight=7.5}\n\n* Can you open the PDF and it's not blank nor nonsense?\nIf the pdf is blank, nonsense, or something like only a copy of the questions, 1) report it as problematic in Peergrade-interface to get another report to review, and 2) send a message to TAs.\n* Is the report anonymous?\n\n:::\n\n\n\n\n:::: {.content-hidden when-format=\"pdf\"}\n::: {.callout-tip collapse=true}\n\n## Setup\n\nJupyterHub has all the needed packages pre-installed.\n\nThe following installs and loads the `aaltobda` package:\n\n::: {.cell}\n\n```{.r .cell-code}\nif(!require(aaltobda)){\n    install.packages(\"aaltobda\", repos = c(\"https://avehtari.github.io/BDA_course_Aalto/\", getOption(\"repos\")))\n    library(aaltobda)\n}\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: aaltobda\n```\n:::\n:::\n\nThe following installs and loads the [`latex2exp` package](https://github.com/stefano-meschiari/latex2exp), which allows us to use LaTeX in plots:\n\n::: {.cell}\n\n```{.r .cell-code}\nif(!require(latex2exp)){\n    install.packages(\"latex2exp\")\n    library(latex2exp)\n}\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: latex2exp\n```\n:::\n:::\n\nThe following installs and loads the [`posterior` package](https://github.com/stan-dev/posterior) which imports the `rhat_basic()` function:\n\n::: {.cell}\n\n```{.r .cell-code}\nif(!require(posterior)){\n    install.packages(\"posterior\")\n    library(posterior)\n}\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: posterior\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThis is posterior version 1.4.0\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'posterior'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:aaltobda':\n\n    mcse_quantile\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    mad, sd, var\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    %in%, match\n```\n:::\n:::\n\nThe following installs and loads the [`ggplot2` package](https://ggplot2.tidyverse.org/), the [`bayesplot` package](https://mc-stan.org/bayesplot/index.html) and the [`dplyr` package](https://dplyr.tidyverse.org/)\n\n::: {.cell}\n\n```{.r .cell-code}\nif(!require(ggplot2)){\n    install.packages(\"ggplot2\")\n    library(ggplot2)\n}\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: ggplot2\n```\n:::\n\n```{.r .cell-code}\nif(!require(bayesplot)){\n    install.packages(\"bayesplot\")\n    library(bayesplot)\n}\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: bayesplot\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThis is bayesplot version 1.10.0\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n- Online documentation and vignettes at mc-stan.org/bayesplot\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n- bayesplot theme set to bayesplot::theme_default()\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n   * Does _not_ affect other ggplot2 plots\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n   * See ?bayesplot_theme_set for details on theme setting\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'bayesplot'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:posterior':\n\n    rhat\n```\n:::\n\n```{.r .cell-code}\nif(!require(dplyr)){\n    install.packages(\"dplyr\")\n    library(dplyr)\n}\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: dplyr\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\nif(!require(tidyr)){\n    install.packages(\"tidyr\")\n    library(tidyr)\n}\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: tidyr\n```\n:::\n\n```{.r .cell-code}\n# Some additional set-up to make plots legible\nggplot2::theme_set(theme_minimal(base_size = 14))\nbayesplot::bayesplot_theme_set(theme_minimal(base_size = 14))\n# register_knitr_engine()\n```\n:::\n\nThe following installs and loads the [`cmdstanr` package](https://mc-stan.org/cmdstanr/) and tries to install `cmdstan`.\n\n::: {.cell}\n\n```{.r .cell-code}\nif(!require(cmdstanr)){\n    install.packages(\"cmdstanr\", repos = c(\"https://mc-stan.org/r-packages/\", getOption(\"repos\")))\n    library(cmdstanr)\n}\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: cmdstanr\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThis is cmdstanr version 0.5.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n- CmdStanR documentation and vignettes: mc-stan.org/cmdstanr\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n- CmdStan path: /root/.cmdstan/cmdstan-2.31.0\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n- CmdStan version: 2.31.0\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nA newer version of CmdStan is available. See ?install_cmdstan() to install it.\nTo disable this check set option or environment variable CMDSTANR_NO_VER_CHECK=TRUE.\n```\n:::\n\n```{.r .cell-code}\ncmdstan_installed <- function(){\n  res <- try(out <- cmdstanr::cmdstan_path(), silent = TRUE)\n  !inherits(res, \"try-error\")\n}\nif(!cmdstan_installed()){\n    install_cmdstan()\n}\n```\n:::\n\n\n:::\n::::\n\n\n# Stan warm-up: linear model of BDA retention with Stan (2 points)\n\nFrom 2018 to 2022, we have been keeping track of assignment submissions for the BDA course given the number of submissions for the 1st assignment. We will fit a simple linear model to answer two questions of interest:\n\n- What is the trend of student retention as measured by assignment submissions?\n- Given the submission rates for assignments 1--8, how many students will complete the final 9th assignment (and potentially pass the course)?\n\nThe author has given you the broken Stan code below, which they intend to encode the following linear model:\n$$\n\\begin{aligned}\np(\\alpha,\\beta,\\sigma) &= \\mathrm{const.}\n      & \\text{(improper flat prior)}&\\text{ and}\\\\\np(y|x,\\alpha,\\beta,\\sigma) &= p_\\mathrm{normal}(y|\\alpha + \\beta x, \\sigma)\n      & \\text{(normal likelihood)} &\\text{.}\n\\end{aligned}\n$$\nIn both the statistical model above and in the Stan model below, $x \\in \\mathbb{R}^N$ and $y \\in \\mathbb{R}^N$ are vectors of the covariates / predictors (the assignment number) and vectors of the observation (proportions of students who have handed in the respective assignment). $\\alpha \\in \\mathbb{R}$ is the unknown scalar intercept, $\\beta \\in \\mathbb{R}$ is the unknown scalar slope and $\\sigma \\in \\mathbb{R}_{>0}$ is the unknown scalar observation standard deviation. The statistical model further implies\n$$\np(y_\\mathrm{pred.}|x_\\mathrm{pred.},\\alpha,\\beta,\\sigma) = p_\\mathrm{normal}(y_\\mathrm{pred.}|\\alpha + \\beta x_\\mathrm{pred.}, \\sigma)\n$$\nas the predictive distribution for a new observation $y_\\mathrm{pred.}$ at a given new covariate value $x_\\mathrm{pred.}$.\n\nYou can download [the broken stan file from github](./additional_files/assignment6/linear_model.stan).\n\n```{.stan}\ndata { #<1>\n    // number of data points\n    int<lower=0> N;\n    // covariate / predictor\n    vector[N] x;\n    // observations\n    vector[N] y;\n    // number of covariate values to make predictions at\n    int<lower=0> no_predictions;\n    // covariate values to make predictions at\n    vector[no_predictions] x_predictions;\n} #<1>\nparameters { #<2>\n    // intercept\n    real alpha;\n    // slope\n    real beta;\n    // the standard deviation should be constrained to be positive\n    real<upper=0> sigma;\n} #<2>\ntransformed parameters { #<3>\n    // deterministic transformation of parameters and data\n    vector[N] mu = alpha + beta * x // linear model\n} #<3>\nmodel { #<4>\n    // observation model / likelihood\n    y ~ normal(mu, sigma);\n} #<4>\ngenerated quantities { #<5>\n    // compute the means for the covariate values at which to make predictions\n    vector[no_predictions] mu_pred = alpha + beta * x_predictions;\n    // sample from the predictive distribution, a normal(mu_pred, sigma).\n    array[no_predictions] real y_pred = normal_rng(mu, sigma);\n} #<5>\n```\n\n1. This is [Stan's data block](https://mc-stan.org/docs/reference-manual/program-block-data.html):\n\"*The `data` block is for the declaration of variables that are read in as data. [...] Each variable’s value is validated against its declaration as it is read. For example, if a variable sigma is declared as `real<lower=0>`, then trying to assign it a negative value will raise an error. As a result, data type errors will be caught as early as possible. Similarly, attempts to provide data of the wrong size for a compound data structure will also raise an error.*\" For more information, follow the link.\n\n2. This is [Stan's parameters block](https://mc-stan.org/docs/reference-manual/program-block-parameters.html):\n\"*The variables declared in the `parameters` program block correspond directly to the variables being sampled by Stan’s samplers (HMC and NUTS). From a user’s perspective, the parameters in the program block are the parameters being sampled by Stan.*\" For more information, follow the link.\n\n3. This is [Stan's transformed parameters block](https://mc-stan.org/docs/reference-manual/program-block-transformed-parameters.html):\n\"*The `transformed parameters` program block consists of optional variable declarations followed by statements. After the statements are executed, the constraints on the transformed parameters are validated. Any variable declared as a transformed parameter is part of the output produced for draws.*\" For more information, follow the link.\n\n4. This is [Stan's model block](https://mc-stan.org/docs/reference-manual/program-block-model.html):\n\"*The `model` program block consists of optional variable declarations followed by statements. The variables in the `model` block are local variables and are not written as part of the output. [...] The statements in the `model` block typically define the model. This is the block in which probability (sampling notation) statements are allowed.*\" For more information, follow the link.\n\n5. This is [Stan's generated quantities block](https://mc-stan.org/docs/reference-manual/program-block-generated-quantities.html):\n\"*The `generated quantities` program block is rather different than the other blocks. Nothing in the `generated quantities` block affects the sampled parameter values. The block is executed only after a sample has been generated.*\" For more information, follow the link.\n\n::: {.hint}\nA normal linear model is actually **not** the best model to use for this type of data, but we will use it here to illustrate the first step in building up to more appropriate, complicated models.\n:::\n\n::: {.subtask}\n<!-- ### Find mistakes in the code -->\nFind the ***three mistakes*** in the code and fix them. Report the original mistakes and your fixes clearly in your report. Include the **full** corrected Stan code in your report. Verify that sampling was successful.\n:::\n\n::: {.hint}\nYou may find some of the mistakes in the code using Stan syntax checker. If you copy the Stan code to a file ending `.stan` and open it in RStudio (you can also choose from RStudio menu File$\\rightarrow$New File$\\rightarrow$Stan file to create a new Stan file), the editor will show you some syntax errors. More syntax errors might be detected by clicking `Check' in the bar just above the Stan file in the RStudio editor. Note that some of the errors in the presented Stan code may not be syntax errors.\n:::\n\n\n\n<!-- ### Interpret the results -->\nThe author runs the corrected Stan file using the following R code and plots the returned MCMC sample. Read through the code below to understand what is being plotted.\n\n\n:::: {.content-hidden when-format=\"pdf\"}\n::: {.callout-tip collapse=true}\n\n## Data preparation and sampling from the posterior\n\n**Data assembly happens here**:\n\n::: {.cell}\n\n```{.r .cell-code}\n# These are our observations y: the proportion of students handing in each assignment (1-8),\n# sorted by year (row-wise) and assignment (column-wise).\n# While the code suggest a matrix structure,\n# the result will actually be a vector of length N = no_years * no_assignments\npropstudents<-c(c(176, 174, 158, 135, 138, 129, 126, 123)/176,\n                c(242, 212, 184, 177, 174, 172, 163, 156)/242,\n                c(332, 310, 278, 258, 243, 242, 226, 224)/332,\n                c(301, 269, 231, 232, 217, 208, 193, 191)/301,\n                c(245, 240, 228, 217, 206, 199, 191, 182)/245)\n# These are our predictors x: for each observation, the corresponding assignment number.\nassignment <- rep(1:8, 5)\n# These are in some sense our test data: the proportion of students handing in the last assignment (9),\n# sorted by year.\n# Usually, we would not want to split our data like that and instead\n# use e.g. Leave-One-Out Cross-Validation (LOO-CV, see e.g. http://mc-stan.org/loo/index.html)\n# to evaluate model performance.\npropstudents9 = c(121/176, 153/242, 218/332, 190/301, 175/245)\n# The total number of assignments\nno_assignments = 9\n# The assignment numbers for which we want to generate predictions\nx_predictions = 1:no_assignments\n# (Cmd)Stan(R) expects the data to be passed in the below format:\nmodel_data = list(N=length(assignment),\n                 x=assignment,\n                 y=propstudents,\n                 no_predictions=no_assignments,\n                 x_predictions=x_predictions)\n```\n:::\n\n**Sampling from the posterior distribution happens here**:\n\n::: {.cell}\n\n```{.r .cell-code}\n# This reads the file at the specified path and tries to compile it.\n# If it fails, an error is thrown.\nretention_model = cmdstan_model(\"./additional_files/assignment6_linear_model.stan\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in initialize(...): Assertion on 'stan_file' failed: File does not exist: './additional_files/assignment6_linear_model.stan'.\n```\n:::\n\n```{.r .cell-code}\n# This \"out <- capture.output(...)\" construction suppresses output from cmdstanr\n# See also https://github.com/stan-dev/cmdstanr/issues/646\nout <- capture.output(\n    # Sampling from the posterior distribution happens here:\n    fit <- retention_model$sample(data=model_data, refresh=0, show_messages=FALSE)\n)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in withVisible(...elt(i)): object 'retention_model' not found\n```\n:::\n:::\n\n**Draws postprocessing happens here**:\n\n::: {.cell}\n\n```{.r .cell-code}\n# This extracts the draws from the sampling result as a data.frame.\ndraws_df = fit$draws(format=\"draws_df\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'fit' not found\n```\n:::\n\n```{.r .cell-code}\n# This does some data/draws wrangling to compute the 5, 50 and 95 percentiles of\n# the mean at the specified covariate values (x_predictions).\n# It can be instructive to play around with each of the data processing steps\n# to find out what each step does, e.g. by removing parts from the back like \"|>  gather(pct,y,-x)\"\n# and printing the resulting data.frame.\nmu_quantiles_df = draws_df |>\n      subset_draws(variable = c(\"mu_pred\")) |>\n      summarise_draws(~quantile2(.x, probs = c(0.05, .5, 0.95))) |>\n      mutate(x = 1:9) |>\n      pivot_longer(c(q5, q50, q95), names_to = c(\"pct\"))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in UseMethod(\"subset_draws\"): no applicable method for 'subset_draws' applied to an object of class \"function\"\n```\n:::\n\n```{.r .cell-code}\n# Same as above, but for the predictions.\ny_quantiles_df = draws_df |>\n      subset_draws(variable = c(\"y_pred\")) |>\n      summarise_draws(~quantile2(.x, probs = c(0.05, .5, 0.95))) |>\n      mutate(x = 1:9) |>\n      pivot_longer(c(q5, q50, q95), names_to = c(\"pct\"))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in UseMethod(\"subset_draws\"): no applicable method for 'subset_draws' applied to an object of class \"function\"\n```\n:::\n:::\n\n\n:::\n::::\n\n::: {.both}\n**Plotting happens here**:\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  # scatter plot of the training data:\n  geom_point(\n    aes(x, y, color=assignment),\n    data=data.frame(x=assignment, y=propstudents, assignment=\"1-8\")\n) +\n  # scatter plot of the test data:\n  geom_point(\n    aes(x, y, color=assignment),\n    data=data.frame(x=no_assignments, y=propstudents9, assignment=\"9\")\n) +\n  # you have to tell us what this plots:\n  geom_line(aes(x,y=value,linetype=pct), data=mu_quantiles_df, color='grey', linewidth=1.5) +\n  # you have to tell us what this plots:\n  geom_line(aes(x,y=value,linetype=pct), data=y_quantiles_df, color='red') +\n  # adding xticks for each assignment:\n  scale_x_continuous(breaks=1:no_assignments) +\n  # adding labels to the plot:\n  labs(y=\"assignment submission %\", x=\"assignment number\") +\n  # specifying that line types repeat:\n  scale_linetype_manual(values=c(2,1,2)) +\n  # Specify colours of the observations:\n  scale_colour_manual(values = c(\"1-8\"=\"black\", \"9\"=\"blue\")) +\n  # remove the legend for the linetypes:\n  guides(linetype=\"none\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in fortify(data): object 'mu_quantiles_df' not found\n```\n:::\n:::\n\n:::\n\n:::: {.content-hidden when-format=\"pdf\"}\n::: {.callout-tip collapse=true}\n\n## Quick check for sampling convergence\n\nIf your model is correctly implemented, sampling from the posterior distribution should have been successful.\nYou can check whether Stan thinks that sampling succeeded by inspecting the output of the below command,\nwhich you should be able to interpret with a little help from the [CmdStan User's Guide](https://mc-stan.org/docs/cmdstan-guide/diagnose.html).\n\n::: {.cell}\n\n```{.r .cell-code}\nfit$cmdstan_diagnose()\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'fit' not found\n```\n:::\n:::\n\n\n:::\n::::\n\n\nBased on the above plot, answer the following questions:\n\n::: {.subtask}\n- What is the solid red line plotting? What are the dashed red lines? How and why are these different from the corresponding grey lines?\n- What is the general trend of student retention as measured by assignment submissions?\n- Given a model fitted to the submission data for assignments 1-8, does it do a good job predicting the proportion of students who submit the final 9th assignment?\n- Name one different modeling choice you could make to improve the prediction.\n:::\n\n\n::: {.rubric}\n* Is the source code included?\n    * No\n    * Yes\n* Is the full resulting modified Stan model code presented in the report?\n    * No\n    * Yes, but partially\n    * Yes, with a few mistakes\n    * Yes, and it is correct\n* Has the sampling success been verified/summarized (e.g. by inspecting and summarizing the output of [`CmdStan`'s `diagnose` method](https://mc-stan.org/docs/cmdstan-guide/diagnose.html)).\n    * No\n    * Yes, but partially\n    * Yes, and it is correctly verified\n* Fix #1: Is there a fix for line **...**.\n    * It has not been discussed, that this line should be fixed.\n    * It has been discussed, that this line should be fixed, but there is no fix presented for it or the fix is clearly wrong.\n    * There is a fix presented for this line, that clearly solves the problem.\n* Fix #2: Is there a fix for line **...**.\n    * It has not been discussed, that this line should be fixed.\n    * It has been discussed, that this line should be fixed, but there is no fix presented for it or the fix is clearly wrong.\n    * There is a fix presented for this line, that clearly solves the problem.\n* Fix #3: Is there a fix for line **...**.\n    * It has not been discussed, that this line should be fixed.\n    * It has been discussed, that this line should be fixed, but there is no fix presented for it or the fix is clearly wrong.\n    * There is a fix presented for this line, that clearly solves the problem.\n* Have the red lines been correctly described (**...**)?\n* Have the grey lines been correctly described (**...**)?\n* Has the difference between the red and grey lines been explained (**...**)?\n* Has the student retention trend been described (**...**)\n* Has the predictive performance for the held out data been discussed and assessed satisfactorily (**...**)?\n    * No\n    * Somewhat\n    * Yes\n* Has at least one way to improve the model been mentioned (E.g. **...** or **...**)?\n:::\n\n# Generalized linear model: Bioassay with Stan (4 points)\n\nReplicate the computations for the bioassay example of section 3.7\n(BDA3) using Stan.\n\n::: {.subtask}\nWrite down the model for the bioassay data in Stan syntax. For\ninstructions in reporting your implementation, you can refer to\nparts 2 c) - g) in Assignment 5. Use the Gaussian prior as in Assignment 4 and 5, that is\n$$\n\\begin{aligned}\n    \\begin{bmatrix}\n    \\alpha \\\\ \\beta\n    \\end{bmatrix}\n    \\sim\n    \\text{N} \\left( \\mu_0,  \\Sigma_0 \\right), \\qquad\n    \\text{where} \\quad\n     \\mu_0 = \\begin{bmatrix} 0 \\\\ 10 \\end{bmatrix} \\quad \\text{and} \\quad\n     \\Sigma_0 = \\begin{bmatrix} 2^2 & 12 \\\\ 12 & 10^2 \\end{bmatrix}.\n\\end{aligned}\n$$\n:::\n\n::: {.hint}\nYou will need Stan functions `multi_normal` and\n`binomial_logit` for implementing the prior and observation model,\nrespectively. In Stan code, it is easiest to declare a variable (say\n`theta`) which is a two-element vector so that the first value\ndenotes $\\alpha$ and latter one $\\beta$. This is because the\n`multi_normal` function that you need for implementing the prior\nrequires a vector as an input.\n:::\n\n\n::: {.subtask}\nUse $\\widehat{R}$ for convergence analysis. You can either use Eq.\n(11.4) in BDA3 or the later version that can be found in [**a recent\narticle**](https://arxiv.org/abs/1903.08008). You should specify\nwhich $\\widehat{R}$ you used. In R the best choice is to use\nfunction `rhat_basic()` or `rhat()` from the `posterior` package\n(see `?posterior::rhat_basic`). To check $\\widehat{R}$ and other\ndiagnostics, you can also call `fit$summary()`, where `fit` is the\nfit object returned by Stan's sampling function. Report the\n$\\widehat{R}$ values both for $\\alpha$ and $\\beta$ and discuss the\nconvergence of the chains. **Briefly explain in your own words how\nto interpret the obtained** $\\widehat{R}$ **values**.\n:::\n\n\n\n::: {.subtask}\nPlot the draws for $\\alpha$ and $\\beta$ (scatter plot) and include\nthis plot in your report. You can compare the results to Figure 3.3b\nin BDA3 to verify that your code gives sensible results. Notice\nthough that the results in Figure 3.3b are generated from posterior\nwith a uniform prior, so even when your algorithm works perfectly,\nthe results will look slightly different (although fairly similar).\n:::\n\n\n\n::: {.subtask}\nTo develop the course and provide feedback to Stan developers, we\ncollect information on which Stan setup you used and whether you had\nany problems in setting it up or using it. Please report,\n\n-   Operating system (Linux, Mac, Windows) [or jupyter.cs.aalto.fi]{.aalto}?\n\n-   Programming environment used: R or Python?\n\n-   Interface used: RStan, CmdStanR, PyStan, or CmdStanPy?\n\n-   Did you have installation or compilation problems? [Did you try first installing locally, but switched to\n    jupyter.cs.aalto.fi?]{.aalto}\n\n-   In addition of these you can write what other things you found\n    out difficult (or even frustrating) when making this assignment\n    with Stan.\n:::\n\n\n\n\n::: {.rubric}\n* Is the Stan model code included?\n    * No\n    * Yes\n* Does the implemented Stan-model seem to be working?\n    * No implementation\n    * Model implemented but results not visualized/reported\n    * Model implemented, but the results seem weird\n    * Model seems to work correctly\n* Are the R_hat-values reported (potential scale reduction factor, Eq. (11.4) in the BDA3)?\n    * No\n    * Yes, but only for alpha or beta\n    * Yes, single values both for alpha and beta\n* Is the interpretation of R_hat values correct (**...**)?\n    * No interpretation or discussion about the R_hat-values, or conclusions clearly wrong\n    * Somewhat correct\n    * Interpretation correct\n* Does the report contain a scatter plot about the draws? Do the results look reasonable, that is, roughly\nlike in the Figure below **...**?\n    * No plot included\n    * Plot included, but the results do not look like in the figure above\n    * Plot included, and the results look roughly like in the figure above\n* Does the report contain description of Stan setup used and whether there were any problems in setting\nit up or using it?\n    * No\n    * Yes\n* Even if the Stan model code is correct, there might be ways to give improve the layout or write the\nmodel in more elegant ways. This optional feedback box can be used to give additional suggestions for\nbetter Stan code.\n:::\n\n# Overall quality of the report\n\n::: {.rubric weight=7.5}\n\n* Does the report include comment on whether AI was used, and if AI was used, explanation on how it was used?\n    - No\n    - Yes\n* Does the report follow the formatting instructions?\n    - Not at all\n    - Little\n    - Mostly\n    - Yes\n* In case the report doesn't fully follow the general and formatting instructions, specify the instructions that have not been followed. If applicable, specify the page of the report, where this difference is visible. This will help the other student to improve their reports so that they are easier to read and review.\nIf applicable, specify the page of the report, where this difference in formatting is visible.\n* Please also provide feedback on the presentation (e.g. text, layout, flow of the responses, figures, figure captions). Part of the course is practicing making data analysis reports. By providing feedback on the report presentation, other students can learn what they can improve or what they already did well. You should be able to provide constructive or positive feedback for all non-empty and non-nonsense reports. If you think the report is perfect, and you can’t come up with any suggestions how to improve, you can provide feedback on what you liked and why you think some part of the report is better than yours.\n\n\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}