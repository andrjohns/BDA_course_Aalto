{
  "hash": "ab568382ce86ffd2b56648fd7ea74af5",
  "result": {
    "markdown": "---\ntitle: \"Assignment instructions\"\nauthor: \"Anynomous\" # The report should be submited anonymously.\nformat:\n  html:\n    toc: true\n    code-tools: true\n    code-line-numbers: true\n    number-sections: true\n    mainfont: Georgia, serif\n    page-layout: article\n  pdf:  \n    geometry:\n    - left=1cm,top=1cm,bottom=1cm,right=7cm\n    number-sections: true\n    code-annotations: none\neditor: source\n---\n\n\n# Introduction\n\nIn addition to R-markdown, [Quarto](https://quarto.org/) can be used to write the assignment reports. This template contains essentially the same information as the [old R-markdown template](https://github.com/avehtari/BDA_course_Aalto/blob/master/templates/assignment_template.rmd) but we illustrate how you can use Quarto for the assignments.\n\nSome useful resources to get started with Quarto (also an example of a list):\n\n-   [Getting started with Quarto and Rstudio from the official webpage](https://quarto.org/docs/get-started/hello/rstudio.html)\n-   [A comprehensive user guide from the official webpage](https://quarto.org/docs/guide/)\n-   [Markdown basics](https://quarto.org/docs/authoring/markdown-basics.html)\n-   [Quarto FAQ for R-markdown users](https://quarto.org/docs/faq/rmarkdown.html)\n-   [Awesome Quarto - list by MickaÃ«l Canouil](https://github.com/mcanouil/awesome-quarto)\n\nTo create your assignment, you can use the assignment-specific templates (recommended, see e.g. the links at the top of [assignment 1](assignment1.html#general-information)) or remove the formatting instructions and use this file as a template. Keep the header (the first lines of this file between two lines of ---) as it sets the author name to be anonymous, and you can set the title to match the assignment number.\n\nAs with R-markdown, you can use the text editor of your choice, but RStudio's editor is probably the easiest and you can choose the formatting (e.g. section headings, bolding, lists, figures, etc.) from the toolbar. Switching between the `source` and `visual` mode allows the quick preview of your formatting.\n\n**Note** The report should be anonymous and submitted to [peergrade.io](peergrade.io) as `assignmentX.pdf`. Aalto JupyterHub has everything installed and you should be able to render the templates to pdf without any further set-up, but if there are problems contact the TAs or get more information on this from the [Quarto documentation](https://quarto.org/docs/output-formats/pdf-engine.html). Alternatively, if you have problem with creating a PDF file, start by creating an HTML file and the just print the HTML to a PDF. You may also use other software to create the report PDF, but follow the general instructions in this file (see the [pdf version of the template file](https://github.com/avehtari/BDA_course_Aalto/blob/master/templates/assignment_template.pdf)).\n\n# Loaded packages\n\nBelow are examples of how to load packages that are used in the assignment. After installing the `aaltobda` package (this is pre-installed in Aalto JupyterHub), you need to also load it in the beginning of every notebook where you want to use it with `library()` function (also in Aalto JupyterHub):\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# To install aaltobda, see the General information in the assignment.\n\nlibrary(aaltobda)\n```\n:::\n\n\n# Including source code\n\nIn general, all code needed to produce the essential parts needs to be included, so that it is possible to see, for peer reviewers (and TAs), where errors may have happened.\n\nYou can always look at the open rubrics to see how and what is asked for in each exercise.\n\nTry to avoid printing an excessive amount of code and think about what is essential for showing how did you get the result.\n\nWrite clear code. The code is also part of your report and clarity of the report affects your score. If the code is not self-explanatory, add comments. In a notebook, you can interleave explaining text and code.\n\nIf in doubt additional source code can be included in an appendix.\n\n# Format instructions\n\nAll exercises in the assignment should start with a header fully specifying that it is exercise X, e.g.: (use \\# in quarto / rmd for a header):\n\n# Exercise 1)\n\nSubtasks in each assignments should be numbered and use header (use \\## for a sub-header).\n\n## a)\n\nFor each subtask include necessary textual explanation, equations, code and figures so that the answer to the question flows naturally. You can think what kind of report would you like to review, and what kind of information would make it easier where there is error (if there are errors).\n\n# Code\n\nIn Quarto, code is inserted in a same way as in R-markdown. In fact, Quarto can also render R-markdown documents.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n5 + 5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10\n```\n:::\n:::\n\n\nThis R code is evaluated when running the notebook or when rendering to PDF.\n\nIf you want to show and run the code, but the output is very long or messy and you prefer to hide the output from the rendered report you can use option `#| results: false`. This is useful especially later as Stan may output many lines. **Note that in Quarto, cell options are specified with the `#|`-syntax.**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n5 + 5\n```\n:::\n\n\nIf you want to use some code in the notebook, but think it's not helpful for the reviewers you can exclude it from the generated PDF with option `#| include: false`. You will see the next block in the qmd-file, but not in the generated PDF.\n\n\n\n\n\nSee more on the cell options from [Quarto documentation](https://quarto.org/docs/reference/cells/cells-knitr.html).\n\n# Plots\n\nInclude plots, with a specific width and height for the figure. We can also add label and caption for the plot:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"drowning\") # Access the data in aaltobda package\nplot(drowning$year, drowning$drownings)\n```\n\n::: {.cell-output-display}\n![Number of drownings per year.](assignment_instructions_files/figure-html/fig-drowning1-1.png){#fig-drowning1 width=480}\n:::\n:::\n\n\nOr using `qplot()` from `ggplot2` package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n# see themes at https://ggplot2.tidyverse.org/reference/ggtheme.html\ntheme_set(theme_classic())\nqplot(drowning$year, drowning$drownings) +\n  labs(x=\"Year\", y=\"Drownings\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: `qplot()` was deprecated in ggplot2 3.4.0.\n```\n:::\n\n::: {.cell-output-display}\n![Number of drownings per year with ggplot2.](assignment_instructions_files/figure-html/fig-drowning2-1.png){#fig-drowning2 width=480}\n:::\n:::\n\n\nOr using `ggplot()` from `ggplot2` package with pipe `|>`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndrowning |>\n  ggplot(aes(x=year, y=drownings)) + \n    geom_point() +\n    labs(x='Year', y='Number of drownings')\n```\n\n::: {.cell-output-display}\n![](assignment_instructions_files/figure-html/unnamed-chunk-7-1.png){width=384}\n:::\n:::\n\n\nOr using `ggplot()` from `ggplot2` package without pipe. In the following code bloc `eval=FALSE` is used to show the code, but not display the same plot again.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=drowning, aes(x=year, y=drownings)) + \n  geom_point() +\n  labs(x='Year', y='Number of drownings')\n```\n:::\n\n\nYou can then refer the figure using `@yourlabel`-syntax: @fig-drowning1, @fig-drowning2. Figure labels should start with `fig-` prefix. If you label equations or tables, they should start with`eq-` and `tbl-` prefixes respectively.\n\n# Images\n\nYou can include an existing image (e.g. scanned copy of pen and paper equations). We will also add a label for cross-referencing.\n\n![Parts of Bayesian workflow](additional_files/bayes_workflow.jpg){#fig-workflow width=\"350\"}\n\nSee @fig-workflow for illustration of parts of Bayesian workflow.\n\n# Equations\n\nYou can write equations using LaTeX syntax, or you can include them as images if, for example, you use Microsoft Equations.\n\nIn Markdown, equations can easily be formulated using LaTeX in line as $f(k) = {n \\choose k} p^{k} (1-p)^{n-k}$. Or use the math environment as follows:\n\n$$\n\\begin{array}{ccc}\nx_{11} & x_{12} & x_{13}\\\\\nx_{21} & x_{22} & x_{23}.\n\\end{array}\n$$\n\nThe above example illustrated also multicolumn 'array'. Alternative way to make multiline equations with alignment is to use 'aligned' as follows:\n\n$$\n\\begin{aligned}\ny & \\sim \\mathrm{normal}(\\mu,1) \\\\\n\\mu & \\sim \\mathrm{normal}(0,1).\n\\end{aligned}\n$$\n\nLabeling equations allows to refer them later in the text. For example:\n\n$$\np(\\theta | y) = \\frac{p(y | \\theta )p(\\theta)}{p(y)}\n$$ {#eq-posterior}\n\nPosterior distribution of $\\theta$ is given by @eq-posterior .\n\nIf you are new to LaTeX equations, you could use the [latext4technics](https://www.latex4technics.com/) equation editor to create LaTeX equations to include in the report.\n\nA short introduction to equations in LaTeX can be found at <https://www.overleaf.com/learn/latex/Mathematical_expressions>.\n\n# Tables\n\nYou can use `knitr::kable` to add formatted tables. Captioning and labeling works similarly as with plots.\n\n\n::: {#tbl-drownings .cell tbl-cap='First six rows of the drowning data.'}\n\n```{.r .cell-code}\nlibrary(knitr)\nkable(head(drowning), col.names=c(\"Year\",\"Drownings\"))\n```\n\n::: {.cell-output-display}\n| Year| Drownings|\n|----:|---------:|\n| 1980|       149|\n| 1981|       127|\n| 1982|       139|\n| 1983|       141|\n| 1984|       122|\n| 1985|       120|\n:::\n:::\n\n\nCompare this to raw output:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Raw output\nhead(drowning)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  year drownings\n1 1980       149\n2 1981       127\n3 1982       139\n4 1983       141\n5 1984       122\n6 1985       120\n```\n:::\n:::\n\n\nIt is also possible to control the number of digits, which is helpful to improve readability:\n\n\n::: {#tbl-mtcars .cell tbl-cap='First five rows of the mtcars data.'}\n\n```{.r .cell-code}\nkable(head(mtcars), digits=1)\n```\n\n::: {.cell-output-display}\n|                  |  mpg| cyl| disp|  hp| drat|  wt| qsec| vs| am| gear| carb|\n|:-----------------|----:|---:|----:|---:|----:|---:|----:|--:|--:|----:|----:|\n|Mazda RX4         | 21.0|   6|  160| 110|  3.9| 2.6| 16.5|  0|  1|    4|    4|\n|Mazda RX4 Wag     | 21.0|   6|  160| 110|  3.9| 2.9| 17.0|  0|  1|    4|    4|\n|Datsun 710        | 22.8|   4|  108|  93|  3.9| 2.3| 18.6|  1|  1|    4|    1|\n|Hornet 4 Drive    | 21.4|   6|  258| 110|  3.1| 3.2| 19.4|  1|  0|    3|    1|\n|Hornet Sportabout | 18.7|   8|  360| 175|  3.1| 3.4| 17.0|  0|  0|    3|    2|\n|Valiant           | 18.1|   6|  225| 105|  2.8| 3.5| 20.2|  1|  0|    3|    1|\n:::\n:::\n\n\nRefer the table in the usual way: see @tbl-drownings.\n\n# Language\n\nThe language used in the course is English. Hence the report needs to be written in English.\n\n# Jupyter Notebook and other report formats\n\nYou are allowed to use any format to produce your report, such as Jupyter Notebook, as long as you follow the formatting instructions in this template. Using Quarto with Jupyter Lab is also possible. See [getting started guide for Jupyter Lab](https://quarto.org/docs/get-started/hello/jupyter.html).\n",
    "supporting": [
      "assignment_instructions_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}