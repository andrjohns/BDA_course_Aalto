{
  "hash": "fbb9f9e009144fb9951592389e26574d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Assignment 7\"\nsubtitle: \"Hierarchical model in Stan\"\nauthor: anonymous # <-- hand in anonymously\nformat: \n  html:\n    toc: true\n    code-tools: true\n    code-line-numbers: true  \n    number-sections: true\n    mainfont: Georgia, serif\n    page-layout: article\n  pdf:  \n    geometry:\n    - left=1cm,top=1cm,bottom=1cm,right=7cm\n    number-sections: true\n    code-annotations: none\neditor: source\n---\n\n\n\n\n\n\n\n\n\n:::{.callout-warning}\n\nCurrently, rendering on github is broken, such that the rendered template at [https://avehtari.github.io/BDA_course_Aalto/assignments/template7.html](https://avehtari.github.io/BDA_course_Aalto/assignments/template7.html)\nlooks weird. Rendering should however work on Aalto's JupyterLab, but we will also try to fix rendering on github ASAP.\n\n:::\n\n\n\n# General information\n\nThis is the template for [assignment 7](assignment7.html). You can download the [separate model with bad priors](./additional_files/assignment7/chickens_separate.stan) and the [qmd-file](https://avehtari.github.io/BDA_course_Aalto/assignments/template7.qmd) or copy the code from this rendered document after clicking on `</> Code` in the top right corner.\n\n**Please replace the instructions in this template by your own text, explaining what you are doing in each exercise.** \n\n\n\n:::: {.content-hidden when-format=\"pdf\"}\n::: {.callout-warning collapse=false}\n \n## Setup \n\n\n*This block will only be visible in your HTML output, but will be hidden when rendering to PDF with quarto for the submission.*\n**Make sure that this does not get displayed in the PDF!**\n    \n\n\nThe following loads several needed packages:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(aaltobda)\nlibrary(bayesplot)\nlibrary(cmdstanr)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(ggdist) # for stat_dotsinterval\nlibrary(posterior)\nif(!require(brms)){\n    install.packages(\"brms\")\n    library(brms)\n}\n\n# Set more readable themes with bigger font for plotting packages.\nggplot2::theme_set(theme_minimal(base_size = 14))\nbayesplot::bayesplot_theme_set(theme_minimal(base_size = 14))\n\n# This registers CmdStan as the backend for compiling cmdstan-chunks.\ncheck_cmdstan_toolchain(fix = TRUE, quiet = TRUE)\nregister_knitr_engine(override = FALSE)\n```\n:::\n\n\n\n\n\n\n:::\n::::\n\n\n# Hierarchical Model: Chicken Data with Stan (6p)\n\n\n## Choosing a weakly informative prior by intuition\n::: {.callout-caution collapse=\"false\"}\n## A word of caution on eliciting the priors below\nPlease note that in the below, we intend to set a prior on $\\mu$ (the *mean* chick weight), but the intuition we ilicit is based on the weight of *individual* chicks. We do so to help create intuition about what the mean could be, however, it would be theoretically more accurate to ilicit priors about *mean* chick weights. \n:::\n\n:::{.callout-important}\n\nWe have made changes to the assignment text and some of the rubrics to make it clearer.\n\n:::\n\n\n## (a)\n\n\n## (b)\n\n\n## (c)\n\n\n## (d)\n\n\n## (e)\n\n## Choosing a weakly informative prior using external references\n\n## (f)\n\n\n## (g)\n\n\n## (h)\n\n\n## (i)\n\n## Non-normal priors\n\n## (j)\n\n## Modeling diet effects on chicken weight\n::::{.callout-important collapse=true}\n# Data inside, don't peek before you have set your priors!\n:::{.callout-important collapse=true}\n# Have you set your priors?\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"ChickWeight\")\n\nChick12 <- ChickWeight |> filter(Time == 12)\n\nhead(Chick12)\n```\n:::\n\n\n\n\n\n:::\n::::\n\n\n:::: {.content-hidden when-format=\"pdf\"}\n::: {.callout-warning collapse=false}\n\n## Sample from the posterior\n\n\n*This block will only be visible in your HTML output, but will be hidden when rendering to PDF with quarto for the submission.*\n**Make sure that this does not get displayed in the PDF!**\n    \n\n\n\nTo sample from the posterior using Stan, use:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstan_data <- list(\n  N_observations = nrow(Chick12),\n  N_diets = length(unique(Chick12$Diet)),\n  diet_idx = Chick12$Diet,\n  weight = Chick12$weight\n)\n\nmodel_separate <- cmdstan_model(stan_file = \"additional_files/assignment7/chickens_separate.stan\")\n\n# Sampling from the posterior distribution happens here:\nfit_separate <- model_separate$sample(data = stan_data, refresh=0,\n                                      show_messages=FALSE,\n                                      show_exceptions=FALSE)\n```\n:::\n\n\n\n\n\nFit objects returned by the `sample()` method, by default print a summary of the posterior draws.\nThese are **NOT** the results you would expect to turn in your report. You will need to change the priors in the code for the separate model.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_separate\n```\n:::\n\n\n\n\n\nQuick model convergence check (as in assignment 6):\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_separate$cmdstan_diagnose()\n```\n:::\n\n\n\n\n\n\n\n:::\n::::\n\n\n\n## (k)\n\n\n## (l)\n\n\n**For the figures below, we use the earlier draws for the separate model with bad priors.\nWhen you have implemented the pooled and hierarchical models, edit the code below to\ninclude draws from your model posterior into the figures.**\n\n\n\n:::: {.content-hidden when-format=\"pdf\"}\n::: {.callout-warning collapse=false}\n\n### Data preparation and sampling from the posterior\n\n\n*This block will only be visible in your HTML output, but will be hidden when rendering to PDF with quarto for the submission.*\n**Make sure that this does not get displayed in the PDF!**\n    \n\n\n    \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Sampling from the posteriors given the pooled and hierarhical models\"}\nfit_pooled <- fit_separate\nfit_hierarchical <- fit_separate\n```\n:::\n\n\n\n\n\n\nBelow, we collect the corresponding posterior draws from the three models into a shared\ndata frame using the `extract_variable` function. This makes plotting the posterior\nin a single plot easier.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Prepare data for plots\"}\n# Expect the same number of posterior draws from each model.\nndraws <- nrow(fit_hierarchical$sampler_diagnostics(format = \"matrix\"))\n\n# Collect posterior draws and the model used to a data frame.\nmean_diet_4_separate = extract_variable(fit_separate, \"mean_diet[4]\")\nmean_diet_4_pooled = extract_variable(fit_pooled, \"mean_diet[4]\")\nmean_diet_4_hierarchical = extract_variable(fit_hierarchical, \"mean_diet[4]\")\nposterior_mean_diet_4 <- data.frame(\n  model_name = rep(c(\"Separate\", \"Pooled\", \"Hierarchical\"),\n              each = ndraws),\n  mean_diet_4 = c(\n   mean_diet_4_separate, mean_diet_4_pooled, mean_diet_4_hierarchical\n  ))\n\npredicted_weight_diet_4 <- data.frame(\n  model_name = rep(c(\"Separate\", \"Pooled\", \"Hierarchical\"),\n              each = ndraws),\n  predicted_weight = c(\n   extract_variable(fit_separate, \"weight_pred\"),\n   extract_variable(fit_pooled, \"weight_pred\"),\n   extract_variable(fit_hierarchical, \"weight_pred\")\n  ))\n\n# Collect posterior draws and the model used to a long data frame.\nposterior_mean_diet_5 <- data.frame(\n  model_name = rep(c(\"Separate\", \"Pooled\", \"Hierarchical\"),\n    each = ndraws\n  ),\n  mean_diet_5 = c(\n    extract_variable(fit_separate, \"mean_five\"),\n    extract_variable(fit_pooled, \"mean_five\"),\n    extract_variable(fit_hierarchical, \"mean_five\")\n  )\n)\n\n# Mean observed weight per diet, these help to compare the posteriors to data.\ndiet_means <- sapply(\n  1:4, function(diet) mean(Chick12[Chick12$Diet == diet, \"weight\"])\n)\n```\n:::\n\n\n\n\n\n\n:::\n::::\n\n\n\n## (m)\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(posterior_mean_diet_4, aes(x = mean_diet_4, y = model_name)) +\n  stat_dotsinterval(quantiles = 100, scale = .9) +\n  vline_at(diet_means[4], size = 1, linetype = \"dashed\") +\n  # Annotate the vline from above.\n  annotate(\"text\", label = \"Observation mean\", x = diet_means[4] - 5, y = .7,\n           hjust = \"right\", size = 6) +\n  # Add title and axis labels. One line to make everything so much more clear!\n  labs(\n    title = \"Mean of diet 4\",\n    x = \"Weight (g)\",\n    y = \"Model\"\n  )\n```\n:::\n\n\n\n\n\n\n\n\n## (n)\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(predicted_weight_diet_4, aes(x = predicted_weight, y = model_name)) +\n  stat_dotsinterval(quantiles = 100, scale = .9) +\n  vline_at(diet_means[4], size = 1, linetype = \"dashed\") +\n  # Annotate the vline from above.\n  annotate(\"text\", label = \"Observation mean\", x = diet_means[4] - 5, y = .7,\n           hjust = \"right\", size = 6) +\n  # Add title and axis labels. One line to make everything so much more clear!\n  labs(\n    title = \"Weigth of a chick with diet 4\",\n    x = \"Weight (g)\",\n    y = \"Model\"\n  )\n```\n:::\n\n\n\n\n\n\n\n\n## (o)\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(posterior_mean_diet_5, aes(x = mean_diet_5, y = model_name)) +\n  # Draw the mean of each diet from the data as a dashed vertical line.\n  vline_at(diet_means, size = .5, linetype = \"dashed\") +\n  # dotsinterval gives mean, 50%, and 90% intervals + dotsplot with each dot\n  # representing 1% of data (quantiles = 100).\n  stat_dotsinterval(quantiles = 100, scale = .9) +\n  # Annotate the vline from above.\n  annotate(geom = \"text\", label = \"Means of observed diets\", y = .7, x = 100,\n           hjust = \"right\", size = 5, family = \"sans\") +\n  # Add title and axis labels. One line to make everything so much more clear!\n  labs(title = \"Mean of a new diet\",\n       x = \"Weight (g)\",\n       y = \"Model\")\n```\n:::\n\n\n\n\n\n\n\n\n## (p)\n\n# Hierarchical model with BRMS (3p)\n:::{.callout-important}\n\nWe have made changes to the assignment text and some of the rubrics to make it clearer.\n\n:::\n\n\n## (a)\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbayesplot::mcmc_scatter(x = fit_hierarchical$draws(variables = c(\"mean_diet[4]\", \"sd_diets\")),\n                        np = nuts_params(fit_hierarchical)) +\n  scale_y_log10() +\n  labs(x = expression(mean_diet[4]), y = expression(sd_diets)) +\n  ylim(c(0,NA))\n```\n:::\n\n\n\n\n\n\n\n\n## (b)\n\n\n**Create a brms model and sample from the posterior**\n    \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbrms_fit = brm(\n  weight ~ 1 + (1 | Diet),\n  data=Chick12,\n  prior=c(\n    # REPLACE WITH YOUR PRIOR DERIVED in 2)\n    prior(normal(0,10), class=\"Intercept\"), \n    # YOU CAN LEAVE THE BELOW PRIORS\n    prior(exponential(.02), class=\"sd\"), \n    prior(exponential(.02), class=\"sigma\"), \n  ),\n  backend = \"cmdstanr\",\n  save_pars = save_pars(manual = c(\"z_1[1,4]\"))\n)\n```\n:::\n\n\n\n\n\n\n\n\n## (c)\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Draws for mu_4\nmu_4 = posterior_epred(brms_fit, newdata = data.frame(Diet=4))\n\n# Compute the mean, and quantiles. Remember to round your answers accordingly.\n# ...\n```\n:::\n\n\n\n\n\n\n\n\n## (d)\n\n\nDue the non-centered parametrization, we need to transform compute the $\\mu_d$ term as the sum of the population intercept and the group specific deviation from the intercept. You can choose which diet to plot by modifying the `d` integer in `r_Diet[d,Intercept]`.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndraws = as_draws_df(brms_fit) |>\n  posterior::mutate_variables(mean_diet_4 = `r_Diet[4,Intercept]` + b_Intercept)\n\nbayesplot::mcmc_scatter(draws,\n                        pars = c(\"mean_diet_4\", \"sd_Diet__Intercept\"),\n                        np = nuts_params(brms_fit)) +\n  scale_y_log10() +\n  xlab(expression(mean_diet[4])) +\n  ylab(expression(sd_diets))\n```\n:::\n\n\n\n\n\n\n\n\n## (e)\n",
    "supporting": [
      "template7_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}